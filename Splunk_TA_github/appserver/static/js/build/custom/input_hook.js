var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t,r){return(t=u(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,u(n.key),n)}}function u(e){var t=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,"string");if("object"!==r(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===r(t)?t:String(t)}e.d(t,{Z:()=>l});const l=function(){function e(t,r,n,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.globalConfig=t,this.serviceName=r,this.state=n,this.mode=i,this.util=a}var t,r;return t=e,(r=[{key:"onChange",value:function(e,t,r){"account_type"===e&&("enterprises"===t?this.util.setState((function(e){var t=i({},e.data);return t.org_name.display=!1,t.org_name.value=null,t.enterprises_name.display=!0,t.enterprises_name.required=!0,{data:t}})):this.util.setState((function(e){var t=i({},e.data);return t.enterprises_name.display=!1,t.enterprises_name.value=null,t.org_name.display=!0,t.org_name.required=!0,{data:t}})))}},{key:"onSave",value:function(e){var t,r;if("orgs"===e.account_type){if(null==(t=e.org_name)||0===t.length)return this.util.setErrorMsg("Field Organization name is  required"),!1}else if(null==(r=e.enterprises_name)||0===r.length)return this.util.setErrorMsg("Field Enterprise name is required"),!1;return!0}},{key:"onRender",value:function(e){"orgs"===this.state.data.account_type.value?this.util.setState((function(e){var t=i({},e.data);return t.enterprises_name.display=!1,{data:t}})):this.util.setState((function(e){var t=i({},e.data);return t.org_name.display=!1,{data:t}}))}},{key:"onEditLoad",value:function(){this.util.setState((function(e){var t=i({},e.data);return t.account.disabled=!0,t.account_type.disabled=!0,{data:t}}))}}])&&o(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();var s=t.Z;export{s as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,